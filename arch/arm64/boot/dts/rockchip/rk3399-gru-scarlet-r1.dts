/*
 * Google Gru-Scarlet Rev1+ board device tree source
 *
 * Copyright 2017 Google, Inc
 *
 * This file is dual-licensed: you can use it either under the terms
 * of the GPL or the X11 license, at your option. Note that this dual
 * licensing only applies to this file, and not this project as a
 * whole.
 *
 *  a) This file is free software; you can redistribute it and/or
 *     modify it under the terms of the GNU General Public License as
 *     published by the Free Software Foundation; either version 2 of the
 *     License, or (at your option) any later version.
 *
 *     This file is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *  Or, alternatively,
 *
 *  b) Permission is hereby granted, free of charge, to any person
 *     obtaining a copy of this software and associated documentation
 *     files (the "Software"), to deal in the Software without
 *     restriction, including without limitation the rights to use,
 *     copy, modify, merge, publish, distribute, sublicense, and/or
 *     sell copies of the Software, and to permit persons to whom the
 *     Software is furnished to do so, subject to the following
 *     conditions:
 *
 *     The above copyright notice and this permission notice shall be
 *     included in all copies or substantial portions of the Software.
 *
 *     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *     EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 *     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *     NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *     HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 *     WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *     FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 *     OTHER DEALINGS IN THE SOFTWARE.
 */

/dts-v1/;

#include "rk3399-gru-scarlet.dtsi"

/ {
	model = "Google Scarlet";
	compatible = "google,scarlet-rev1", "google,scarlet",
		     "google,gru", "rockchip,rk3399";

	pp1250_s3: pp1250-s3 {
		compatible = "regulator-fixed";
		regulator-name = "pp1250_s3";

		/* EC turns on w/ PP1250_S3_EN; TODO:always on for AP? */
		regulator-always-on;
		regulator-boot-on;

		regulator-min-microvolt = <1250000>;
		regulator-max-microvolt = <1250000>;

		vin-supply = <&ppvar_sys>;
	};

	pp1250_cam: pp1250-dvdd {
		compatible = "regulator-fixed";
		regulator-name = "pp1250_dvdd";
		pinctrl-names = "default";
		pinctrl-0 = <&pp1250_cam_en>;

		regulator-always-on; //TODO: for debug
		regulator-boot-on;

		enable-active-high;
		gpio = <&gpio2 4 GPIO_ACTIVE_HIGH>;

		startup-delay-us = <200>; //TODO: check delay
		vin-supply = <&pp1250_s3>;
	};

	pp2800_cam: pp2800-avdd {
		compatible = "regulator-fixed";
		regulator-name = "pp2800_avdd";
		pinctrl-names = "default";
		pinctrl-0 = <&pp2800_cam_en>;

		regulator-always-on; //TODO: for debug
		regulator-boot-on;

		enable-active-high;
		gpio = <&gpio2 24 GPIO_ACTIVE_HIGH>;

		startup-delay-us = <200>; //TODO: check delay
		vin-supply = <&pp3300>;
	};
};

&i2c7 {
	status = "okay";

	clock-frequency = <400000>;

	/* These are relatively safe rise/fall times; TODO: measure */
	i2c-scl-falling-time-ns = <50>;
	i2c-scl-rising-time-ns = <300>;

	wcam: ov5670@36 {
		compatible = "ovti,ov5670";
		reg = <0x36>;
		pinctrl-names = "default";
		pinctrl-0 = <&clk_24m_cam &wcam_rst>;

		clock-frequency = <24000000>;
		clocks = <&cru SCLK_TESTCLKOUT1>;
		clock-names = "xclk";

		avdd-supply = <&pp1800>;
		dvdd-supply = <&pp1250_cam>;
		dovdd-supply = <&pp2800_cam>;
		reset-gpios = <&gpio2 5 GPIO_ACTIVE_LOW>;

		port {
			wcam_out: endpoint {
				remote-endpoint = <&mipi_in_wcam>;
				data-lanes = <1 2>;
			};
		};
	};

	ucam: ov2680@10 {
		compatible = "ovti,ov2680";
		reg = <0x10>;
		pinctrl-names = "default";
		/* There is not pwdn pin from ov2680 datasheet, but
		 * ucam_pwdn is required by ucam module.
		 */
		pinctrl-0 = <&clk_24m_cam &ucam_rst &ucam_pwdn>;

		clocks = <&cru SCLK_TESTCLKOUT1>;
		clock-names = "xclk";

		avdd-supply = <&pp1800>;
		dovdd-supply = <&pp2800_cam>;
		reset-gpios = <&gpio2 3 GPIO_ACTIVE_LOW>;

		port {
			ucam_out: endpoint {
				remote-endpoint = <&mipi_in_ucam>;
				data-lanes = <1>;
			};
		};
	};
};

&isp0 {
	status = "okay";
};

&isp0_mmu {
	status = "okay";
};

&isp_mipi_dphy_rx0 {
	status = "okay";

	port {
		#address-cells = <1>;
		#size-cells = <0>;

		mipi_in_wcam: endpoint@0 {
			reg = <0>;
			remote-endpoint = <&wcam_out>;
			data-lanes = <1 2>;
		};

		mipi_in_ucam: endpoint@1 {
			reg = <1>;
			remote-endpoint = <&ucam_out>;
			data-lanes = <1>;
		};
	};
};

/* PINCTRL: always below everything else */
&pinctrl {
	camera {
		clk_24m_cam: clk-24m-cam {
			rockchip,pins = <RK_GPIO2 25 RK_FUNC_2 &pcfg_pull_none>;
		};
		pp1250_cam_en: pp1250-dvdd {
			rockchip,pins = <RK_GPIO2 4 RK_FUNC_GPIO
					 &pcfg_pull_down>;
		};
		pp2800_cam_en: pp2800-avdd {
			rockchip,pins = <RK_GPIO2 24 RK_FUNC_GPIO
					 &pcfg_pull_down>;
		};
		ucam_pwdn: ucam_pwdn {
			rockchip,pins = <RK_GPIO4 5 RK_FUNC_GPIO
					 &pcfg_pull_up>;
		};
		ucam_rst: ucam_rst {
			rockchip,pins = <RK_GPIO2 3 RK_FUNC_GPIO
					 &pcfg_pull_down>;
		};
		wcam_rst: wcam_rst {
			rockchip,pins = <RK_GPIO2 5 RK_FUNC_GPIO
					 &pcfg_pull_down>;
		};
	};
};
